<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on win32)" generated="20190809 11:17:15.989" rpa="false">
<suite id="s1" name="Tests" source="C:\Users\apoorva.b.agrawal\Desktop\Development\MSSQLDatabaseTest\tests">
<suite id="s1-s1" name="TableLevelTests" source="C:\Users\apoorva.b.agrawal\Desktop\Development\MSSQLDatabaseTest\tests\TableLevelTests">
<suite id="s1-s1-s1" name="TestTable" source="C:\Users\apoorva.b.agrawal\Desktop\Development\MSSQLDatabaseTest\tests\TableLevelTests\TestTable.robot">
<kw name="Connect" library="DatabaseConnections" type="setup">
<tags>
<tag>TestDB</tag>
</tags>
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymssql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20190809 11:17:16.086" level="INFO">Connecting using : pymssql.connect(database=TestDB, user=testuser, password=test123, host=CPX-CMSUMI7OH6Y, port=1433) </msg>
<status status="PASS" starttime="20190809 11:17:16.071" endtime="20190809 11:17:16.145"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:16.071" endtime="20190809 11:17:16.145"></status>
</kw>
<test id="s1-s1-s1-t1" name="Insert a Record">
<kw name="Get Input Data" library="DatabaseConnections">
<tags>
<tag>TestDB</tag>
</tags>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>Enter Data</arg>
</arguments>
<assign>
<var>${dataToLoad}</var>
</assign>
<msg timestamp="20190809 11:17:23.599" level="INFO">${dataToLoad} = test12345</msg>
<status status="PASS" starttime="20190809 11:17:16.146" endtime="20190809 11:17:23.599"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>Enter First Name</arg>
</arguments>
<assign>
<var>${FirstName}</var>
</assign>
<msg timestamp="20190809 11:17:28.563" level="INFO">${FirstName} = Martin</msg>
<status status="PASS" starttime="20190809 11:17:23.599" endtime="20190809 11:17:28.563"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>Enter Last Name</arg>
</arguments>
<assign>
<var>${LastName}</var>
</assign>
<msg timestamp="20190809 11:17:33.960" level="INFO">${LastName} = Svensson</msg>
<status status="PASS" starttime="20190809 11:17:28.563" endtime="20190809 11:17:33.960"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${DATATOLOAD}</arg>
<arg>${dataToLoad}</arg>
</arguments>
<msg timestamp="20190809 11:17:33.962" level="INFO">${DATATOLOAD} = test12345</msg>
<status status="PASS" starttime="20190809 11:17:33.961" endtime="20190809 11:17:33.962"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:16.146" endtime="20190809 11:17:33.962"></status>
</kw>
<kw name="Insert Record" library="DatabaseConnections">
<tags>
<tag>TestDB</tag>
</tags>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>INSERT INTO TestTable (Name, TextData, Num) VALUES('${DATATOLOAD}','${DATATOLOAD}', 0);</arg>
</arguments>
<msg timestamp="20190809 11:17:33.981" level="INFO">Executing : Execute SQL String  |  INSERT INTO TestTable (Name, TextData, Num) VALUES('test12345','test12345', 0); </msg>
<status status="PASS" starttime="20190809 11:17:33.964" endtime="20190809 11:17:34.245"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>insert into Person (First_Name, Last_Name) values ('${FIRSTNAME}','${LASTNAME}');</arg>
</arguments>
<msg timestamp="20190809 11:17:34.245" level="INFO">Executing : Execute SQL String  |  insert into Person (First_Name, Last_Name) values ('',''); </msg>
<status status="PASS" starttime="20190809 11:17:34.245" endtime="20190809 11:17:34.293"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:33.963" endtime="20190809 11:17:34.293"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:16.146" endtime="20190809 11:17:34.293" critical="yes"></status>
</test>
<test id="s1-s1-s1-t2" name="Verify the Table">
<kw name="Verify Table" library="DatabaseConnections">
<tags>
<tag>DBTests</tag>
</tags>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>TestTable</arg>
</arguments>
<msg timestamp="20190809 11:17:34.296" level="INFO">Executing : Table Must Exist  |  TestTable </msg>
<msg timestamp="20190809 11:17:34.296" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='TestTable' </msg>
<status status="PASS" starttime="20190809 11:17:34.296" endtime="20190809 11:17:34.710"></status>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>Person</arg>
</arguments>
<msg timestamp="20190809 11:17:34.710" level="INFO">Executing : Table Must Exist  |  Person </msg>
<msg timestamp="20190809 11:17:34.710" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='Person' </msg>
<status status="PASS" starttime="20190809 11:17:34.710" endtime="20190809 11:17:34.720"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:34.295" endtime="20190809 11:17:34.720"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:34.295" endtime="20190809 11:17:34.721" critical="yes"></status>
</test>
<test id="s1-s1-s1-t3" name="Verify the Table Records">
<kw name="Verify Records" library="DatabaseConnections">
<tags>
<tag>DBTests</tag>
</tags>
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>select * from Person where First_Name = '${FIRSTNAME}' and Last_Name = '${LASTNAME}'</arg>
</arguments>
<msg timestamp="20190809 11:17:34.723" level="INFO">Executing : Check If Exists In Database  |  select * from Person where First_Name = '' and Last_Name = '' </msg>
<msg timestamp="20190809 11:17:34.723" level="INFO">Executing : Query  |  select * from Person where First_Name = '' and Last_Name = '' </msg>
<status status="PASS" starttime="20190809 11:17:34.723" endtime="20190809 11:17:34.726"></status>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select * from Person</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20190809 11:17:34.727" level="INFO">Executing : Row Count Is Equal To X  |  select * from Person  |  1 </msg>
<msg timestamp="20190809 11:17:34.727" level="INFO">Executing : Row Count  |  select * from Person </msg>
<status status="PASS" starttime="20190809 11:17:34.726" endtime="20190809 11:17:34.728"></status>
</kw>
<kw name="Row Count Is 0" library="DatabaseLibrary">
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<arguments>
<arg>select * from Person where First_Name = '${DATATOLOAD}'</arg>
</arguments>
<msg timestamp="20190809 11:17:34.729" level="INFO">Executing : Row Count Is 0  |  select * from Person where First_Name = 'test12345' </msg>
<msg timestamp="20190809 11:17:34.729" level="INFO">Executing : Row Count  |  select * from Person where First_Name = 'test12345' </msg>
<status status="PASS" starttime="20190809 11:17:34.729" endtime="20190809 11:17:34.730"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:34.722" endtime="20190809 11:17:34.730"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:34.721" endtime="20190809 11:17:34.731" critical="yes"></status>
</test>
<kw name="Disconnect" library="DatabaseConnections" type="teardown">
<tags>
<tag>TestDB</tag>
</tags>
<kw name="Delete All Rows From Table" library="DatabaseLibrary">
<doc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>TestTable</arg>
</arguments>
<msg timestamp="20190809 11:17:34.733" level="INFO">Executing : Delete All Rows From Table  |  DELETE FROM TestTable; </msg>
<status status="PASS" starttime="20190809 11:17:34.732" endtime="20190809 11:17:34.746"></status>
</kw>
<kw name="Delete All Rows From Table" library="DatabaseLibrary">
<doc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>Person</arg>
</arguments>
<msg timestamp="20190809 11:17:34.747" level="INFO">Executing : Delete All Rows From Table  |  DELETE FROM Person; </msg>
<status status="PASS" starttime="20190809 11:17:34.747" endtime="20190809 11:17:34.749"></status>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20190809 11:17:34.749" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20190809 11:17:34.749" endtime="20190809 11:17:34.749"></status>
</kw>
<status status="PASS" starttime="20190809 11:17:34.732" endtime="20190809 11:17:34.749"></status>
</kw>
<doc>SQL Proc Level Tests</doc>
<status status="PASS" starttime="20190809 11:17:16.019" endtime="20190809 11:17:34.749"></status>
</suite>
<status status="PASS" starttime="20190809 11:17:16.017" endtime="20190809 11:17:34.751"></status>
</suite>
<status status="PASS" starttime="20190809 11:17:15.992" endtime="20190809 11:17:34.753"></status>
</suite>
<statistics>
<total>
<stat pass="3" fail="0">Critical Tests</stat>
<stat pass="3" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="3" fail="0" id="s1" name="Tests">Tests</stat>
<stat pass="3" fail="0" id="s1-s1" name="TableLevelTests">Tests.TableLevelTests</stat>
<stat pass="3" fail="0" id="s1-s1-s1" name="TestTable">Tests.TableLevelTests.TestTable</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
